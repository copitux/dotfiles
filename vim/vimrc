"
"                       __   _(_)_ __ ___  _ __ ___
"                       \ \ / / | '_ ` _ \| '__/ __|
"                        \ V /| | | | | | | | | (__
"                       (_)_/ |_|_| |_| |_|_|  \___|
"
" Author: David Medina <davidmedina9@gmail.com>
" Source: http://github.com/copitux/dotfiles
" Fork: http://github.com/joedicastro/dotfiles <joedicastro.com>

" NEOBUNDLE, plugin manager {{{

set nocompatible

" NeoBundle auto-installation and setup {{{

" Auto installing NeoBundle
let neobundle_readme=expand($HOME.'/.vim/bundle/neobundle.vim/README.md')
if !filereadable(neobundle_readme)
  echo "Installing NeoBundle.."
  echo ""
  silent !mkdir -p $HOME/.vim/bundle
  silent !git clone https://github.com/Shougo/neobundle.vim $HOME/.vim/bundle/neobundle.vim
endif

" Call NeoBundle
if has('vim_starting')
  set rtp+=$HOME/.vim/bundle/neobundle.vim/
endif
call neobundle#begin(expand('~/.vim/bundle/'))

NeoBundleFetch 'Shougo/neobundle.vim'

" End: NeoBundle auto-installation and setup }}}

" Plugins {{{

" Run on background
NeoBundle 'Shougo/vimproc', {'build': {'unix': 'make -f make_unix.mak'}}
" Zoom in and out windows splits
NeoBundleLazy 'vim-scripts/zoomwintab.vim', {'autoload': {'commands': 'ZoomWinTabIn'}}

NeoBundle 'tpope/vim-surround'                      " Tpope must: surround
NeoBundle 'tpope/vim-repeat'                        " Tpope must: . improved
NeoBundle 'tpope/vim-commentary'                    " Tpope must: comment code
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'scrooloose/syntastic'                    " Syntax checking
NeoBundle 'kien/ctrlp.vim'                          " Fuzzy file search
NeoBundle 'bling/vim-airline'                       " Pretty status line
" NeoBundle 'Shougo/unite.vim'                        " Unite. The interface to rule almost everything
" NeoBundle 'Shougo/neocomplete.vim'                  " Auto completion solution
NeoBundle 'Valloric/YouCompleteMe'
NeoBundle 'Raimondi/delimitMate'                    " Auto completion for ([{' ...
NeoBundle 'Rykka/riv.vim'                           "  reStructuredText in vim.
NeoBundle 'majutsushi/tagbar'
NeoBundle 'tpope/vim-unimpaired'
NeoBundle 'othree/javascript-libraries-syntax.vim'
NeoBundle 'pangloss/vim-javascript'
NeoBundle 'terryma/vim-multiple-cursors'
NeoBundle 'mileszs/ack.vim'
NeoBundle 'IN3D/vim-raml'
NeoBundleCheck



" Colorschemes: jellybeans, solarized {{{

NeoBundle 'nanotech/jellybeans.vim'
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'tomasr/molokai'

" }}}

" XXX: To see it
" python-mode: python motions
NeoBundle 'vim-scripts/matchit.zip'
" virtualenv

" End: Plugins }}}

NeoBundleCheck

filetype plugin indent on      " Indent and plugins by filetype

call neobundle#end()

" End: NEOBUNDLE, plugin manager }}}

" VIM core {{{

" <Leader> & <LocalLeader> mapping {{{

let mapleader=','
let maplocalleader= ' '                     " Unite key. XXX: See it

" End: <Leader> & <LocalLeader> mapping }}}

" Basic options {{{

set encoding=utf-8
scriptencoding utf-8
set autoread                                " Update a open file edited outside of Vim
set backspace=indent,eol,start              " Defines the backspace key behavior
set guioptions=aegit                        " Hide: toolbar, menu and scrollbars
set hidden                                  " Hide the inactive buffers
set laststatus=2                            " Status line always visible
set listchars=tab:>-,trail:.,nbsp:.,eol:¬   " Highlight problematic whitespace
set list                                    " shows hidden chars
set ruler                                   " (x, y) of cursor at statusline
set showcmd                                 " Show commands near statusline
set ttyfast                                 " better screen redraw
set novisualbell                            " turn off the visual bell
set completeopt=menu,menuone                " options to completion menus
set mouse=a

" End: Basic options }}}

" Backups and undo {{{

set nobackup
set noswapfile
set undodir=$HOME/.vim/tmp/undo/
set undofile

function! MakeDirIfNoExists(path) "{{{
    if !isdirectory(expand(a:path))
        call mkdir(expand(a:path), "p")
    endif
endfunction "}}}
silent! call MakeDirIfNoExists(&undodir)

" End: Backups and undo}}}

" Theme and style {{{

syntax enable                       " enable the syntax highlight
set background=dark                 " set a dark background
set guifont=Ubuntu\ Mono\ derivative\ Powerline\ 11
set t_Co=256                        " 256 colors for the terminal
colorscheme jellybeans

" End: Theme and style }}}

" Searching {{{

set hlsearch                    " highlight search results
set ignorecase                  " ignore case letters
set incsearch                   " incremental searching
set showmatch                   " show pairs match
set smartcase                   " smart case ignore

" }}}

" Wildmenu: Command line autocompletion {{{

set wildmenu
set wildmode=list:longest,full      " Shows all the options

set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.bak,*.?~,*.??~,*.???~,*.~      " Backup files
set wildignore+=*.luac                           " Lua byte code
set wildignore+=*.jar                            " java archives
set wildignore+=*.pyc                            " Python byte code

" }}}

" Tabs, space and wrapping {{{

set autoindent                 " set on the auto-indent
" set smartindent                " Smart indent on new lines, {, # and so on (C related)
set expandtab                  " spaces instead of tabs
set shiftwidth=4               " number of spaces for auto-indent
set softtabstop=4              " a soft-tab of four spaces
set tabstop=4                  " a tab = four spaces

"set formatoptions=qrn1ct       " XXX: Try this
set textwidth=120
set colorcolumn=121

" }}}

" Mappings {{{

" Fast windows moves {{{

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" }}}

" Save as root
cmap w!! w !sudo tee % >/dev/null<CR>:e!<CR><CR>

" Quick saving. XXX: Did I use it?
nnoremap <silent><Leader>w :update<CR>

" Sanitize
nnoremap <Leader>s :%s/\s\+$//<CR>

" Make j and k keys works as usual with wrapping
nnoremap j gj
nnoremap k gk

" visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

" Toggle the search results highlighting
map <silent><Leader>cl :set invhlsearch<CR>

" Avoid Command-line window with q:. Use CTRL-F on command-line input instead
nnoremap q: :q

" Sort selected
vnoremap <Leader>s :sort!<CR>

nmap <leader>b :TagbarToggle<CR>
nmap <leader>v Oimport ipdb; ipdb.set_trace()<ESC>

" }}}

" Copy, cut and paste {{{

set clipboard=unnamedplus,unnamed         " + register by default
map <Leader>p :set invpaste<CR>

" End: Copy, cut and paste }}}

" End: VIM core }}}

" PLUGINS setup {{{

" Tagbar {{{
let g:tagbar_left = 1
let g:tagbar_sort = 0

" End: Tagbar }}}

" Ctrl-p {{{

let g:ctrlp_map = '<leader><leader>'
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_working_path_mode = 0
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn)$',
    \ 'file': '\v\.(pyc|exe|so|dll)$',
    \ }
let g:ctrlp_max_depth = 10

" End: Ctrl-p }}}

" Airline {{{

set ttimeoutlen=0        "  toggle between modes almost instantly

let g:airline_powerline_fonts=1

" End: Airline }}}

" Syntastic {{{

let g:syntastic_python_checkers = ['flake8']
let g:syntastic_javascript_checkers = ['jshint']
let g:syntastic_error_symbol='✗'
let g:syntastic_style_error_symbol  = '⚡'
let g:syntastic_style_warning_symbol  = '⚡'
let g:syntastic_warning_symbol='⚠'

" End: Syntastic }}}

" Commentary {{{

nmap <Leader>c <Plug>CommentaryLine
xmap <Leader>c <Plug>Commentary

augroup plugin_commentary
    au!
    au FileType python setlocal commentstring=#%s
    au FileType htmldjango setlocal commentstring={#\ %s\ #}
    au FileType puppet setlocal commentstring=#\ %s
augroup END

" }}}

" Autocomplete {{{

" Onmicomplete: css, html, markdown, javascript, python, ruby, xml {{{
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
" }}}

" }}}

" Zoomwintab {{{

map <Leader>z :ZoomWinTabToggle<CR>

" End: Zoomwintab }}}


" End: PLUGINS setup }}}

" AUTOCOMMAND {{{

" General

au FocusLost * :wa

" Html
au BufRead,BufNewFile */templates/*.html setlocal filetype=htmldjango.html

" Python
au BufNewFile *.py so $HOME/.vim/file_headers/python.txt
au BufNewFile *.raml so $HOME/.vim/file_headers/raml.txt

" Js

" End: AUTOCOMMAND }}}

" Other Customizations {{{ ====================================================

if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif

" }}}

" vim:foldmethod=marker
" vim:foldlevel=0
